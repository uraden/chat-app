{"version":3,"sources":["WelcomeScreen.js","ChatItem.js","ChatScreen.js","App.js","reportWebVitals.js","index.js"],"names":["WelcomeScreen","props","login","state","email","room","history","push","handleChange","event","setState","target","name","value","this","AppBar","style","styles","header","elevation","Toolbar","Typography","variant","className","fontSize","textAlign","color","paddingLeft","paddingRight","Grid","grid","container","direction","justify","alignItems","Card","card","item","gridItem","TextField","required","textField","label","placeholder","type","onChange","Button","button","onClick","React","Component","position","top","left","right","bottom","padding","width","paddingTop","paddingBottom","ChatItem","message","isOwnMessage","author","ListItem","listItem","body","timestamp","Date","dateCreated","toISOString","toLocaleString","flexDirection","borderRadius","marginTop","maxWidth","background","fontWeight","Chat","require","ChatScreen","joinChannel","channel","a","channelState","status","join","loading","on","handleMessageAdded","scrollToBottom","messages","maxScrollTop","scrollDiv","current","scrollHeight","clientHeight","scrollTop","componentDidMount","location","token","replace","getToken","Error","Client","create","client","updateToken","getMessages","items","getChannelByUniqueName","createChannel","uniqueName","friendlyName","axios","get","response","data","sendMessage","text","String","trim","createRef","Container","component","marginBottom","Backdrop","open","zIndex","CircularProgress","CssBaseline","mainGrid","gridItemChatList","ref","List","dense","map","index","gridItemMessage","textFieldContainer","multiline","rows","onKeyPress","key","disabled","IconButton","sendButton","Send","sendIcon","overflow","height","backgroundColor","boxShadow","marginLeft","borderWidth","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78b27c45.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Grid,\n    TextField,\n    Card,\n    AppBar,\n    Toolbar,\n    Typography,\n    Button,\n} from \"@material-ui/core\";\nimport './WelcomeScreen.css'\n\nclass WelcomeScreen extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            room: \"\",\n        };\n    }\n    login = () => {\n        const { email, room } = this.state;\n        if (email && room) {\n            this.props.history.push(\"chat\", { room, email });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, room } = this.state;\n        return (\n            <>\n                <AppBar style={styles.header} elevation={10}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            Chat App with Twilio Programmable Chat and React\n                </Typography>\n                    </Toolbar>\n                </AppBar>\n                <div className=\"intro\" >\n                    <h1 className=\"intro1\" style={{ fontSize: \"20px\", textAlign: \"center\", color: \"#3F51B5\" }}>  Please enter your email address and your </h1>\n                    <h1 style={{ fontSize: \"20px\", textAlign: \"center\", color: \"#3F51B5\", paddingLeft: \"5px\", paddingRight: \"5px\", color: \"red\" }}> unique* </h1>\n                    <h1 style={{ fontSize: \"20px\", textAlign: \"center\", color: \"#3F51B5\" }}>  Room number to join the chat</h1>\n                </div>\n                <Grid\n                    style={styles.grid}\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\">\n                    <Card style={styles.card} elevation={10}>\n                        <Grid item style={styles.gridItem}>\n                            <TextField\n                                name=\"email\"\n                                required\n                                style={styles.textField}\n                                label=\"Email address\"\n                                placeholder=\"Enter email address\"\n                                variant=\"outlined\"\n                                type=\"email\"\n                                value={email}\n                                onChange={this.handleChange} />\n                        </Grid>\n                        <Grid item style={styles.gridItem}>\n                            <TextField\n                                name=\"room\"\n                                required\n                                style={styles.textField}\n                                label=\"Room\"\n                                placeholder=\"Enter room name\"\n                                variant=\"outlined\"\n                                value={room}\n                                onChange={this.handleChange} />\n                        </Grid>\n                        <Grid item style={styles.gridItem}>\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                style={styles.button}\n                                onClick={this.login}>\n                                Login\n                  </Button>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </>\n        );\n    }\n}\n\n\nconst styles = {\n    header: {},\n    grid: { position: \"absolute\", top: 0, left: 0, right: 0, bottom: 0 },\n    card: { padding: 40 },\n    textField: { width: 300 },\n    gridItem: { paddingTop: 12, paddingBottom: 12 },\n    button: { width: 300 },\n};\n\n\nexport default WelcomeScreen;","import React from \"react\";\nimport { ListItem } from \"@material-ui/core\";\n\nclass ChatItem extends React.Component {\n  render() {\n    const { message, email } = this.props;\n    const isOwnMessage = message.author === email;\n\n    return (\n      <ListItem style={styles.listItem(isOwnMessage)}>\n        <div style={styles.author}>{message.author}</div>\n        <div style={styles.container(isOwnMessage)}>\n          {message.body}\n          <div style={styles.timestamp}>\n            {new Date(message.dateCreated.toISOString()).toLocaleString()}\n          </div>\n        </div>\n      </ListItem>\n    );\n  }\n}\n\nconst styles = {\n  listItem: (isOwnMessage) => ({\n    flexDirection: \"column\",\n   \n    borderRadius: 15,\n    marginTop : 10,\n    alignItems: isOwnMessage ? \"flex-end\" : \"flex-start\",\n  }),\n  container: (isOwnMessage) => ({\n    maxWidth: \"75%\",\n    borderRadius: isOwnMessage ? '35% 35% 0 35%': '0 35% 35% 35%',\n    padding: 16,\n    color: isOwnMessage ? \"white\": \"white\",\n    fontSize: 20,\n    background: isOwnMessage ? \"linear-gradient(#EB896D, #F75479)\" : \"linear-gradient(#39cc8f, #39ccb4)\",\n\n  }),\n  \n\n  author: { fontSize: 10, color: \"blue\", fontWeight: 900 },\n  timestamp: { fontSize: 10, color: \"pink\", textAlign: \"right\", paddingTop: 4,fontWeight: 900 },\n};\n\nexport default ChatItem;","import React from \"react\";\nimport {\n    AppBar,\n    Backdrop,\n    CircularProgress,\n    Container,\n    CssBaseline,\n    Grid,\n    IconButton,\n    List,\n    TextField,\n    Toolbar,\n    Typography,\n} from \"@material-ui/core\";\nimport { Send } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport ChatItem from \"./ChatItem\";\nimport './ChatScreen.css'\n\nconst Chat = require(\"twilio-chat\");\n\n\nclass ChatScreen extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: \"\",\n            messages: [],\n            loading: false,\n            channel: null,\n        };\n\n        this.scrollDiv = React.createRef();\n    }\n    joinChannel = async (channel) => {\n        if (channel.channelState.status !== \"joined\") {\n            await channel.join();\n        }\n\n        this.setState({\n            channel: channel,\n            loading: false\n        });\n\n        channel.on(\"messageAdded\", this.handleMessageAdded);\n        this.scrollToBottom();\n    };\n\n\n    handleMessageAdded = (message) => {\n        const { messages } = this.state;\n        this.setState({\n            messages: [...messages, message],\n        },\n            this.scrollToBottom\n        );\n    };\n\n    scrollToBottom = () => {\n        const scrollHeight = this.scrollDiv.current.scrollHeight;\n        const height = this.scrollDiv.current.clientHeight;\n        const maxScrollTop = scrollHeight - height;\n        this.scrollDiv.current.scrollTop = maxScrollTop > 0 ? maxScrollTop : 0;\n    };\n\n    componentDidMount = async () => {\n        const { location } = this.props;\n        const { state } = location || {};\n        const { email, room } = state || {};\n        let token = \"\";\n\n        if (!email || !room) {\n            this.props.history.replace(\"/\");\n        }\n        this.setState({ loading: true });\n\n        try {\n            token = await this.getToken(email);\n        } catch {\n            throw new Error(\"Unable to get token, please reload this page\");\n        }\n\n        const client = await Chat.Client.create(token);\n\n        client.on(\"tokenAboutToExpire\", async () => {\n            const token = await this.getToken(email);\n            client.updateToken(token);\n        });\n\n        client.on(\"tokenExpired\", async () => {\n            const token = await this.getToken(email);\n            client.updateToken(token);\n        });\n        client.on(\"channelJoined\", async (channel) => {\n            // getting list of all messages since this is an existing channel\n            const messages = await channel.getMessages();\n            this.setState({ messages: messages.items || [] });\n            this.scrollToBottom();\n        });\n\n        try {\n            const channel = await client.getChannelByUniqueName(room);\n            this.joinChannel(channel);\n        } catch (err) {\n            try {\n                const channel = await client.createChannel({\n                    uniqueName: room,\n                    friendlyName: room,\n                });\n\n                this.joinChannel(channel);\n            } catch {\n                throw new Error(\"Unable to create channel, please reload this page\");\n            }\n        }\n\n    }\n\n    getToken = async (email) => {\n        const response = await axios.get(`http://localhost:5000/token/${email}`);\n        const { data } = response;\n        return data.token;\n    }\n\n    sendMessage = () => {\n        const { text, channel } = this.state;\n        \n        if (text) {\n          this.setState({ loading: true });\n          channel.sendMessage(String(text).trim());\n          this.setState({ text: \"\", loading: false });\n        }\n      };\n\n      render() {\n        const { loading, text, messages, channel } = this.state;\n        const { location } = this.props;\n        const { state } = location || {};\n        const { email, room } = state || {};\n      \n        return (\n             \n\n          <Container component=\"main\" maxWidth=\"md\">\n              <h1 style={{fontSize: \"50px\", marginTop: '90px', marginBottom: \"-60px\", textAlign:\"center\"}} > Live Chat App with  Twilio API </h1>\n            <Backdrop open={loading} style={{ zIndex: 99999 }}>\n              <CircularProgress style={{ color: \"white\" }} />\n            </Backdrop>\n      \n            <AppBar elevation={10}>\n              <Toolbar>\n                <Typography variant=\"h6\">\n                  {`Room: ${room}, User: ${email}`}\n                </Typography>\n              </Toolbar>\n            </AppBar>\n      \n            <CssBaseline />\n      \n            <Grid container direction=\"column\" style={styles.mainGrid}>\n              <Grid item style={styles.gridItemChatList} ref={this.scrollDiv}>\n                <List dense={true}>\n                    {messages &&\n                      messages.map((message) => \n                        <ChatItem\n                          key={message.index}\n                          message={message}\n                          email={email}/>\n                      )}\n                </List>\n              </Grid>\n      \n              <Grid item style={styles.gridItemMessage}>\n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\">\n                  <Grid item style={styles.textFieldContainer}>\n                    <TextField\n                      className=\"textfield\"\n                      required\n                      style={styles.textField}\n                      placeholder=\"Enter message\"\n                      variant=\"outlined\"\n                      multiline\n                      rows={2}\n                      value={text}\n                      onKeyPress= {(event) => {\n                        if (event.key === \"Enter\") {this.sendMessage()}\n                      }}\n                      disabled={!channel}\n                      onChange={(event) =>\n                        this.setState({ text: event.target.value })\n                      }/>\n                  </Grid>\n                  \n                  <Grid item>\n                    <IconButton\n                      style={styles.sendButton}\n                      onClick={this.sendMessage}\n                      disabled={!channel}>\n                      <Send style={styles.sendIcon} />\n                    </IconButton>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Container>\n        );\n      }\n}\n\n\nconst styles = {\n    gridItem: { paddingTop: 12, paddingBottom: 92 },\n    gridItemChatList: { overflow: \"auto\", height: \"60vh\", backgroundColor: \"#EFF7F9\", borderRadius: 25,  boxShadow: \"15px\"},\n    gridItemMessage: { marginTop: 12, marginBottom: 12 },\n    sendButton: { backgroundColor: \"#0076F6\", marginLeft:'10px'},\n    sendIcon: { color: \"white\" },\n    mainGrid: { paddingTop: 80, borderWidth: 0 },\n  };\n\n\nexport default ChatScreen;","import RouterLink from './Router';\nimport WelcomeScreen from \"./WelcomeScreen\";\nimport ChatScreen from \"./ChatScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={WelcomeScreen} />\n        <Route path=\"/chat\"  component={ChatScreen} />\n\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}